{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlfor","TextForm","useState","text","setText","style","color","heading","class","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cf0ec19c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props){\r\n    return(\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About text here'\r\n};","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n\r\n    }\r\n\r\n    const handleClearText = ()=>{\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"All text cleared!\", \"success\");\r\n\r\n    }\r\n    const handelOnChange = (event)=>{\r\n        // console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    \r\n    const handleCopy = () => {\r\n        var text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard!\", \"success\");\r\n\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces are removed!\", \"success\");\r\n\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div class=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handelOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className = \"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className = \"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className = \"btn btn-primary mx-1\" onClick={handleClearText}>Clear text</button>\r\n            <button className = \"btn btn-primary mx-1\" onClick={handleCopy}>Copy text</button>\r\n            <button className = \"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n\r\n            {/* Apply condition here by own  */}\r\n            {/* <p>if(text.length===0)?{0} words : {text.split(\" \").length} words and {text.length} characters</p> */}\r\n            \r\n            <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0 ? text : \"Enter something in the textbox above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        \r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n               <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => (\n      setAlert(null)),1500);\n  }\n\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark mode';\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light mode';\n\n    }\n}\n  return (\n    <>\n      <Navbar title=\"TextUtils\" aboutText=\"About \" mode={mode} toggleMode={toggleMode}/>\n      {/* <Navbar/> */}\n      <Alert alert={alert}/>\n\n      <div className=\"container my-3\">\n      <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n        {/* <About/> */}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}